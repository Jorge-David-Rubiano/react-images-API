{"version":3,"sources":["Components/Buscador.js","Components/Imagen.js","Components/Paginacion.js","Components/Resultado.js","App.js","serviceWorker.js","index.js"],"names":["Buscador","busquedaRef","React","createRef","obtenerDatos","e","preventDefault","termino","current","value","props","datosBusqueda","onSubmit","this","className","ref","type","placeholder","Component","Imagen","imagen","largeImageURL","likes","previewURL","tags","views","comments","src","alt","href","target","Paginacion","onClick","paginaAnterior","paginaSiguiente","Resultado","mostrarImagenes","imagenes","length","map","key","id","App","state","pagina","scroll","document","querySelector","scrollIntoView","setState","consultarApi","url","console","log","fetch","then","respuesta","json","resultado","hits","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uMAuCeA,E,4MAnCXC,YAAcC,IAAMC,Y,EAEpBC,aAAe,SAAAC,GACXA,EAAEC,iBAEF,IAAMC,EAAU,EAAKN,YAAYO,QAAQC,MAEzC,EAAKC,MAAMC,cAAcJ,I,4CAG/B,WACE,OACE,0BAAMK,SAAUC,KAAKT,cACnB,yBAAKU,UAAU,OACb,yBAAKA,UAAU,uBACb,2BACEC,IAAKF,KAAKZ,YACVe,KAAK,OACLF,UAAU,+BACVG,YAAY,sCAGhB,yBAAKH,UAAU,uBACb,2BACEE,KAAK,SACLF,UAAU,mCACVL,MAAM,qB,GA5BGS,aCkBRC,EAlBA,SAACT,GAAW,IAAD,EAE6CA,EAAMU,OAAlEC,EAFe,EAEfA,cAAeC,EAFA,EAEAA,MAAOC,EAFP,EAEOA,WAAYC,EAFnB,EAEmBA,KAAMC,EAFzB,EAEyBA,MAFzB,EAEgCC,SAEtD,OACI,yBAAKZ,UAAU,8CACX,yBAAKA,UAAU,QACX,yBAAKa,IAAKJ,EAAYK,IAAKJ,EAAMV,UAAU,uBAC3C,yBAAKA,UAAU,aACX,uBAAGA,UAAU,aAAaQ,EAA1B,aACA,uBAAGR,UAAU,aAAaW,EAA1B,WAEA,uBAAGI,KAAMR,EAAeS,OAAO,SAAShB,UAAU,4BAAlD,kBCFLiB,EAVI,SAAArB,GAEf,OACI,yBAAKI,UAAU,QACX,4BAAQkB,QAAStB,EAAMuB,eAAgBjB,KAAK,SAASF,UAAU,qBAA/D,mBACA,4BAAQkB,QAAStB,EAAMwB,gBAAiBlB,KAAK,SAASF,UAAU,gBAAhE,sBCgCGqB,E,4MAjCXC,gBAAkB,WACd,IAAMC,EAAW,EAAK3B,MAAM2B,SAE5B,OAAuB,IAApBA,EAASC,OAAsB,KAG9B,kBAAC,WAAD,KACI,yBAAKxB,UAAU,kBACVuB,EAASE,KAAI,SAAAnB,GAAM,OAChB,kBAAC,EAAD,CACIoB,IAAKpB,EAAOqB,GACZrB,OAAQA,QAIpB,kBAAC,EAAD,CACIa,eAAgB,EAAKvB,MAAMuB,eAC3BC,gBAAiB,EAAKxB,MAAMwB,oB,4CAM5C,WACI,OACI,kBAAC,WAAD,KACKrB,KAAKuB,uB,GA5BElB,aC+FTwB,E,4MA7FbC,MAAQ,CACNpC,QAAS,GACT8B,SAAW,GACXO,OAAS,I,EAGXC,OAAS,WACUC,SAASC,cAAc,cAC/BC,eAAe,SAAU,Q,EAGpCf,eAAiB,WAEf,IAAIW,EAAS,EAAKD,MAAMC,OAGxB,GAAc,IAAXA,EAAe,OAAO,KAGzBA,IAGA,EAAKK,SAAS,CACZL,WACC,WACD,EAAKM,eACL,EAAKL,a,EAKTX,gBAAkB,WAGhB,IAAIU,EAAS,EAAKD,MAAMC,OAGxBA,IAGA,EAAKK,SAAS,CACZL,WACC,WACD,EAAKM,eACL,EAAKL,a,EAMTK,aAAe,WACb,IAAM3C,EAAU,EAAKoC,MAAMpC,QACrBqC,EAAS,EAAKD,MAAMC,OACpBO,EAAG,4EAAwE5C,EAAxE,6BAAoGqC,GAE7GQ,QAAQC,IAAIF,GAEZG,MAAMH,GACHI,MAAK,SAAAC,GAAS,OAAIA,EAAUC,UAC5BF,MAAK,SAAAG,GAAS,OAAI,EAAKT,SAAS,CAAEZ,SAAWqB,EAAUC,W,EAG5DhD,cAAgB,SAACJ,GACf,EAAK0C,SAAS,CACZ1C,QAASA,EACTqC,OAAQ,IACP,WACD,EAAKM,mB,4CAIT,WACE,OACE,yBAAKpC,UAAU,iBACb,yBAAKA,UAAU,aACX,uBAAGA,UAAU,0BAAb,2BAEA,kBAAC,EAAD,CACIH,cAAeE,KAAKF,iBAG5B,yBAAKG,UAAU,8BACb,kBAAC,EAAD,CACEuB,SAAUxB,KAAK8B,MAAMN,SACrBJ,eAAgBpB,KAAKoB,eACrBC,gBAAiBrB,KAAKqB,wB,GAvFhBhB,aCQE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrB,SAASsB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.78bfd50c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Buscador extends Component {\n\n    busquedaRef = React.createRef();\n\n    obtenerDatos = e => {\n        e.preventDefault();\n        // Tomamos el valor del input\n        const termino = this.busquedaRef.current.value;\n        // Lo enviamos al componente principal\n        this.props.datosBusqueda(termino);        \n    }\n\n  render() {\n    return (\n      <form onSubmit={this.obtenerDatos}>\n        <div className=\"row\">\n          <div className=\"form-group col-md-8\">\n            <input\n              ref={this.busquedaRef}\n              type=\"text\"\n              className=\"form-control form-control-lg\"\n              placeholder=\"Busca tu Imagen. Ejemplo: Futbol\"\n            />\n          </div>\n          <div className=\"form-group col-md-4\">\n            <input\n              type=\"submit\"\n              className=\"btn btn-lg btn-primary btn-block\"              \n              value=\"Buscar...\"\n            />\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default Buscador;\n","import React from 'react';\n\nconst Imagen = (props) => {\n\n    const {largeImageURL, likes, previewURL, tags, views, comments } = props.imagen;\n\n    return(\n        <div className=\"col-12 col-sm-6 col col-md-4 col-lg-3 mb-4\">\n            <div className=\"card\">\n                <img src={previewURL} alt={tags} className=\"card-img-top image\" /> \n                <div className=\"card-body\">\n                    <p className=\"card-text\">{likes} Me gusta</p>\n                    <p className=\"card-text\">{views} Vistas</p>\n\n                    <a href={largeImageURL} target=\"_blank\" className=\"btn btn-danger btn-block\">Ver Imagen</a>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default Imagen;","import React from 'react';\n\nconst Paginacion = props => {\n\n    return(\n        <div className=\"py-3\">\n            <button onClick={props.paginaAnterior} type=\"button\" className=\"btn btn-info mr-1\">Anterior &larr;</button>\n            <button onClick={props.paginaSiguiente} type=\"button\" className=\"btn btn-info\">Siguiente &rarr;</button>\n        </div>\n    )\n}\n\nexport default Paginacion;","import React, {Component, Fragment} from 'react';\nimport Imagen from './Imagen';\nimport Paginacion from './Paginacion';\n\nclass Resultado extends Component {\n\n    mostrarImagenes = () => {\n        const imagenes = this.props.imagenes;\n\n        if(imagenes.length === 0 ) return null;\n\n        return (\n            <Fragment>\n                <div className=\"col-12 p-5 row\">\n                    {imagenes.map(imagen => (\n                        <Imagen \n                            key={imagen.id}\n                            imagen={imagen}\n                        />\n                    ))}\n                </div>\n                <Paginacion\n                    paginaAnterior={this.props.paginaAnterior}\n                    paginaSiguiente={this.props.paginaSiguiente}\n                />\n            </Fragment>\n        )\n    }\n\n    render() {\n        return (\n            <Fragment>\n                {this.mostrarImagenes()}            \n            </Fragment>\n            \n        );\n    }\n}\n\nexport default Resultado;","import React, {Component} from 'react';\nimport Buscador from './Components/Buscador';\nimport Resultado from './Components/Resultado';\n\nclass App extends Component {\n\n  state = {\n    termino: '',\n    imagenes : [],\n    pagina : ''\n  }\n\n  scroll = () => {\n    const elemento = document.querySelector('.jumbotron');\n    elemento.scrollIntoView('smooth', 'end');\n  }\n\n  paginaAnterior = () => {\n    // leer el state de la pagina actual\n    let pagina = this.state.pagina;\n\n    // Si la pagina es 1 no ir hacia atras\n    if(pagina === 1 ) return null;\n\n    // Resta 1 a la pagina actual\n    pagina--;\n\n    // Agregar el cambio al state\n    this.setState({\n      pagina\n    }, () => {\n      this.consultarApi();\n      this.scroll();\n    }); \n\n    // console.log(pagina)\n  }\n  paginaSiguiente = () => {\n    \n    // leer el state de la pagina actual\n    let pagina = this.state.pagina;\n\n    // Sumar 1 a la pagina actual\n    pagina++;\n\n    // Agregar el cambio al state\n    this.setState({\n      pagina\n    }, () => {\n      this.consultarApi();\n      this.scroll();\n    }); \n\n    // console.log(pagina)\n  }\n\n  consultarApi = () => {\n    const termino = this.state.termino;\n    const pagina = this.state.pagina;\n    const url = `https://pixabay.com/api/?key=17534358-92b73a9a6ddb1ab11589856ea&q=${termino}&per_page=30&page=${pagina}`;\n\n    console.log(url);\n\n    fetch(url)\n      .then(respuesta => respuesta.json())\n      .then(resultado => this.setState({ imagenes : resultado.hits  }))\n  } \n\n  datosBusqueda = (termino) => {\n    this.setState({\n      termino: termino,\n      pagina: 1\n    }, () => {\n      this.consultarApi();\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app container\">\n        <div className=\"jumbotron\">\n            <p className=\"title lead text-center\">Buscador de Im√°genes</p>\n  \n            <Buscador \n                datosBusqueda={this.datosBusqueda}\n            />\n        </div> \n        <div className=\"row justify-content-center\">\n          <Resultado \n            imagenes={this.state.imagenes}\n            paginaAnterior={this.paginaAnterior}\n            paginaSiguiente={this.paginaSiguiente}\n          />  \n        </div>     \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}